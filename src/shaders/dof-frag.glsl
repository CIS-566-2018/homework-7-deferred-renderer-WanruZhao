#version 300 es
precision highp float;

in vec2 fs_UV;
out vec4 out_Col;

uniform sampler2D u_frame;
uniform sampler2D u_frame2;
uniform vec2 u_Size;
uniform float u_Time;
uniform float u_DOF;



void main() {
    float bias = 0.1;
    float blurClamp = 2.0;
	vec3 color = texture(u_frame, fs_UV).xyz;
    float depth = -(texture(u_frame2, fs_UV).w);

    
    vec3 sumColor = vec3(0.0);
    vec2 curCoord = gl_FragCoord.xy;

    float dofBlur = 0.0;
    if(depth > u_DOF) dofBlur = clamp( (depth - u_DOF) * bias, -blurClamp, blurClamp);
    else if(depth < 0.0) dofBlur = clamp( (0.0 - depth) * bias, -blurClamp, blurClamp);

    // gaussian blur
    float kernel[225] = float[](
        0.003026,	0.003279,	0.003509,	0.003709,	0.003873,	0.003994,	0.004069,	0.004094,	0.004069,	0.003994,	0.003873,	0.003709,	0.003509,	0.003279,	0.003026,
        0.003279,	0.003553,	0.003802,	0.004019,	0.004196,	0.004327,	0.004408,	0.004436,	0.004408,	0.004327,	0.004196,	0.004019,	0.003802,	0.003553,	0.003279,
        0.003509,	0.003802,	0.004069,	0.004301,	0.004491,	0.004631,	0.004718,	0.004747,	0.004718,	0.004631,	0.004491,	0.004301,	0.004069,	0.003802,	0.003509,
        0.003709,	0.004019,	0.004301,	0.004546,	0.004747,	0.004895,	0.004987,	0.005018,	0.004987,	0.004895,	0.004747,	0.004546,	0.004301,	0.004019,	0.003709,
        0.003873,	0.004196,	0.004491,	0.004747,	0.004956,	0.005111,	0.005207,	0.005239,	0.005207,	0.005111,	0.004956,	0.004747,	0.004491,	0.004196,	0.003873,
        0.003994,	0.004327,	0.004631,	0.004895,	0.005111,	0.005271,	0.00537	,   0.005403,	0.00537 ,   0.005271,	0.005111,	0.004895,	0.004631,	0.004327,	0.003994,
        0.004069,	0.004408,	0.004718,	0.004987,	0.005207,	0.00537	,   0.00547	,   0.005504,	0.00547	,   0.00537	,   0.005207,	0.004987,	0.004718,	0.004408,	0.004069,
        0.004094,	0.004436,	0.004747,	0.005018,	0.005239,	0.005403,	0.005504,	0.005538,	0.005504,	0.005403,	0.005239,	0.005018,	0.004747,	0.004436,	0.004094,
        0.004069,	0.004408,	0.004718,	0.004987,	0.005207,	0.00537	,   0.00547 ,   0.005504,	0.00547	,   0.00537	,   0.005207,	0.004987,	0.004718,	0.004408,	0.004069,
        0.003994,	0.004327,	0.004631,	0.004895,	0.005111,	0.005271,	0.00537	,   0.005403,	0.00537	,   0.005271,	0.005111,	0.004895,	0.004631,	0.004327,	0.003994,
        0.003873,	0.004196,	0.004491,	0.004747,	0.004956,	0.005111,	0.005207,	0.005239,	0.005207,	0.005111,	0.004956,	0.004747,	0.004491,	0.004196,	0.003873,
        0.003709,	0.004019,	0.004301,	0.004546,	0.004747,	0.004895,	0.004987,	0.005018,	0.004987,	0.004895,	0.004747,	0.004546,	0.004301,	0.004019,	0.003709,
        0.003509,	0.003802,	0.004069,	0.004301,	0.004491,	0.004631,	0.004718,	0.004747,	0.004718,	0.004631,	0.004491,	0.004301,	0.004069,	0.003802,	0.003509,
        0.003279,	0.003553,	0.003802,	0.004019,	0.004196,	0.004327,	0.004408,	0.004436,	0.004408,	0.004327,	0.004196,	0.004019,	0.003802,	0.003553,	0.003279,
        0.003026,	0.003279,	0.003509,	0.003709,	0.003873,	0.003994,	0.004069,	0.004094,	0.004069,	0.003994,	0.003873,	0.003709,	0.003509,	0.003279,	0.003026

    );

    int radius = 15;
    
    

    for(int i = - radius / 2; i <= radius / 2; i++) {
        for(int j = - radius / 2; j <= radius / 2; j++) {
            vec2 uv = vec2((curCoord[0] + float(i) * dofBlur ) / u_Size[0],
                    (curCoord[1] + float(j) * dofBlur) / u_Size[1]);
            vec3 originColor = texture(u_frame, uv).xyz;
            sumColor += kernel[radius * (i + radius / 2) + (j + radius / 2)] * originColor ;
        }
    }



    // out_Col = vec4(vec3(abs(texture(u_frame2, fs_UV).w) / 100.0), 1.0);
	out_Col = vec4(sumColor + color, 1.0);//vec4(texture(u_frame2, fs_UV).www, 1.0);



}
